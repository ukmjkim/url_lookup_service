# How to run: rake import_malware:import
require "uri"
require "net/http"

class ImportMalware
  def initialize
    @home_dir = "/home/ec2-user/url-lookup-service"
    @data_file_dir = "#{@home_dir}/docs"
    @txt_file = "#{@data_file_dir}/malware_sample.txt"
  end

  def run
    start_time = Time.now
    file = File.open(@txt_file)
    @total_count = 0
    @success_count = 0
    @hit_count = 0
    @no_hit_count = 0
    @deleted_count = 0
    @success_urls = [] 
    file.each { |uri_string| request_url_lookup_service(uri_string.gsub(/\n/,'')) }
    end_time = Time.now
    puts "-------------------------------------------------------------"
    puts "Finished! Took #{(end_time - start_time)/3600} hours"
    puts "Total #: #{@total_count}, Success #: #{@success_count}, Cache Hit #: #{@hit_count}, Deleted: #{@deleted_count}, No Hit #: #{@no_hit_count}"
    puts "-------------------------------------------------------------"
  end

  def request_url_lookup_service(uri_string)
    uri_malware = parse_malware_uri(uri_string)
    uri_lookup_service = make_request_uri(uri_malware)
    response = send_request_to_lookup_service(uri_lookup_service, :post)
    case response
    when Net::HTTPCreated
      @success_count += 1 
      @success_urls << uri_string
      response = send_request_to_lookup_service(uri_lookup_service, :get)
      result = JSON.parse(response.body)
      if result['data_source'] == "cache"
        @hit_count += 1 
        response = send_request_to_lookup_service(uri_lookup_service, :delete)
        result = JSON.parse(response.body)
        if result['data_source'] == "none"
          @deleted_count += 1 
          response = send_request_to_lookup_service(uri_lookup_service, :get)
          result = JSON.parse(response.body)
          if result['data_source'] == "cache"
            @no_hit_count += 1 
          end
        end
      end
    else
      puts "FAIL: #{uri_string}"
    end
    @total_count += 1 
  end

  def parse_malware_uri(uri_string)
    uri = URI.parse(URI.encode(uri_string))
    # puts "FULL: #{uri_string}"
    # puts "    ==> HOST: #{uri.host}, PATH: #{uri.path}, QUERY_STRING: #{uri.query}"
    uri_path_query = URI.encode("#{uri.path}#{uri.query}")

    # replace '/' to '-' for multi level path
    uri_path_query = uri_string.gsub(/\//, '-')
    { uri_host: uri.host, uri_path_query: uri_path_query }
  end

  def make_request_uri(uri_malware)
    URI("http://localhost:3000/urlinfo/1/#{uri_malware[:uri_host]}/#{uri_malware[:uri_path_query]}")
  end

  def send_request_to_lookup_service(uri_lookup_service, http_method)
    http = Net::HTTP.new(uri_lookup_service.host, uri_lookup_service.port)
    case http_method
    when :post
    	request = Net::HTTP::Post.new(uri_lookup_service.path)
    when :delete
    	request = Net::HTTP::Delete.new(uri_lookup_service.path)
    else
    	request = Net::HTTP::Get.new(uri_lookup_service.path)
    end
    http.request(request)
  end
end
