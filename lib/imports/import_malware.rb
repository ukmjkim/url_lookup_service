require 'uri'
require 'net/http'

URL_LOOKUP_SERVICE = 'http://localhost:3000/urlinfo/1/'.freeze

# How to run: rake import_malware:import
class ImportMalware
  def initialize
    @home_dir = '/home/ec2-user/url-lookup-service'
    @data_file_dir = "#{@home_dir}/docs"
    @txt_file = "#{@data_file_dir}/malware_sample.txt"
  end

  def run
    start_time = Time.now
    file = File.open(@txt_file)
    @total_count = 0
    @success_count = 0
    @hit_count = 0
    @no_hit_count = 0
    @deleted_count = 0
    @success_urls = []
    file.each do |uri_string|
      uri_string.delete!("\n")
      request_url_lookup_service(uri_string)
    end
    end_time = Time.now
    execution_time = (end_time - start_time) / 3600
    puts '============================================================='
    puts "Total #:     #{@total_count}"
    puts "Success #:   #{@success_count}"
    puts "Cache Hit #: #{@hit_count}"
    puts "Deleted #:   #{@deleted_count}"
    puts "No Hit #:    #{@no_hit_count}"
    puts '-------------------------------------------------------------'
    puts "Finished! Took #{execution_time} hours"
    puts '============================================================='
  end

  def request_url_lookup_service(uri_string)
    uri_malware = parse_malware_uri(uri_string)
    uri_lookup_service = make_request_uri(uri_malware)

    # 1. make POST requests to the url lookup service to store them
    #    into database and cache
    @total_count += 1
    response = send_request_to_lookup_service(uri_lookup_service, :post)
    unless response.class == Net::HTTPCreated
      puts "FAIL: #{uri_string}"
      return
    end

    # 2. make GET requests to assert whether the urls exist in cache
    @success_count += 1
    @success_urls << uri_string
    response = send_request_to_lookup_service(uri_lookup_service, :get)
    result = JSON.parse(response.body)
    return unless result['data_source'] == 'cache'

    # 3. make DELETE requests to delete the urls from database and cache
    @hit_count += 1
    response = send_request_to_lookup_service(uri_lookup_service, :delete)
    result = JSON.parse(response.body)
    return unless result['data_source'] == 'none'

    # 4. make GET requests to assert whether the urls no longer exist
    #    in both database and cache
    @deleted_count += 1
    response = send_request_to_lookup_service(uri_lookup_service, :get)
    result = JSON.parse(response.body)
    return unless result['data_source'] == 'cache'

    @no_hit_count += 1
  end

  def parse_malware_uri(uri_string)
    uri = URI.parse(URI.encode(uri_string))
    uri_path_query = URI.encode("#{uri.path}#{uri.query}")

    # replace '/' to '-' for multi level path
    uri_path_query = uri_path_query.tr('/', '-')
    { uri_host: uri.host, uri_path_query: uri_path_query }
  end

  def make_request_uri(uri_malware)
    uri_host = uri_malware[:uri_host]
    uri_path_query = uri_malware[:uri_path_query]
    URI("#{URL_LOOKUP_SERVICE}#{uri_host}/#{uri_path_query}")
  end

  def send_request_to_lookup_service(uri_lookup_service, http_method)
    http = Net::HTTP.new(uri_lookup_service.host, uri_lookup_service.port)
    case http_method
    when :post
      http.request(Net::HTTP::Post.new(uri_lookup_service.path))
    when :delete
      http.request(Net::HTTP::Delete.new(uri_lookup_service.path))
    else
      http.request(Net::HTTP::Get.new(uri_lookup_service.path))
    end
  end
end
